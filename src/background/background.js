// src/background/background.js
const KEY_URL = 'https://proxy-api-1op.pages.dev/api/keys?token=9f73c1e8a1424e3fbf2d1f50ce7b1a2bgtyetw42';

let PROXIES = [];
let CREDS_1_10 = null;
let CREDS_11_20 = null;
let currentProfileIndex = -1;

// ======== –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ –∏ —É—á—ë—Ç–æ–∫ –≤ –ø–∞–º—è—Ç—å ========
async function loadCredentialsFromServer() {
  try {
    const resp = await fetch(KEY_URL);
    if (!resp.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–π');
    const data = await resp.json();

    PROXIES = data.proxies;
    CREDS_1_10 = data.creds["1_10"];
    CREDS_11_20 = data.creds["11_20"];

    await chrome.storage.local.set({ PROXIES }); // —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏, –±–µ–∑ –ø–∞—Ä–æ–ª–µ–π
    console.log("‚úÖ –ö–ª—é—á–∏ –∏ –ø—Ä–æ–∫—Å–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø–∞–º—è—Ç—å (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π)");
  } catch (e) {
    console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª—é—á–∏:", e.message);
  }
}

// ======== –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –ø–æ –∏–Ω–¥–µ–∫—Å—É (–∏–∑ –ø–∞–º—è—Ç–∏) ========
function getAuthCredentials() {
  if (currentProfileIndex >= 0 && currentProfileIndex < 10) {
    return CREDS_1_10;
  }
  if (currentProfileIndex >= 10 && currentProfileIndex < PROXIES.length) {
    return CREDS_11_20;
  }
  return null;
}

// ======== –°–æ–∑–¥–∞–Ω–∏–µ proxy-–∫–æ–Ω—Ñ–∏–≥–∞ ========
function makeProxyConfig(idx) {
  const { ip, port } = PROXIES[idx];
  return {
    mode: "fixed_servers",
    rules: {
      singleProxy: { scheme: "http", host: ip, port },
      bypassList: ["<local>"]
    }
  };
}

// ======== –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ ========
function applySettings(proxyEnabled, selectedProfile) {
  currentProfileIndex = selectedProfile;

  const config = (proxyEnabled && selectedProfile >= 0)
    ? makeProxyConfig(selectedProfile)
    : { mode: "direct" };

  chrome.proxy.settings.set(
    { value: config, scope: "regular" },
    () => {
      if (chrome.runtime.lastError) {
        console.error("‚ùå Proxy settings error:", chrome.runtime.lastError);
      } else {
        console.log(`‚úÖ Proxy ${proxyEnabled ? "ON" : "OFF"}, profile=${selectedProfile}`);
      }
    }
  );
}

// ======== –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ========
function restoreFromStorage() {
  chrome.storage.local.get(
    { proxyEnabled: false, selectedProfile: -1 },
    ({ proxyEnabled, selectedProfile }) => applySettings(proxyEnabled, selectedProfile)
  );
}

// ======== –ü—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –∑–∞–ø—É—Å–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞ ========
chrome.runtime.onInstalled.addListener(async () => {
  await loadCredentialsFromServer();
  restoreFromStorage();
});
chrome.runtime.onStartup.addListener(async () => {
  await loadCredentialsFromServer();
  restoreFromStorage();
});

// ======== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ popup.js ========
chrome.storage.onChanged.addListener((changes, area) => {
  if (area === "local" && (changes.proxyEnabled || changes.selectedProfile)) {
    restoreFromStorage();
  }
});

// ======== –ü—Ä—è–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç popup.js ========
chrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {
  if (msg.action === "updateProxy") {
    applySettings(msg.proxyEnabled, msg.selectedProfile);
    sendResponse({ ok: true });
  }
});

// ======== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ========
chrome.webRequest.onAuthRequired.addListener(
  details => {
    const creds = getAuthCredentials();
    if (creds) {
      console.log(`üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è ${currentProfileIndex}`);
      return { authCredentials: creds };
    }
    return {};
  },
  { urls: ["<all_urls>"] },
  ["blocking"]
);